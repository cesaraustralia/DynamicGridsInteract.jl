var documenterSearchIndex = {"docs":
[{"location":"#DynamicGridsInteract.jl","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.jl","text":"","category":"section"},{"location":"","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.jl","text":"Modules = [DynamicGridsInteract]","category":"page"},{"location":"#DynamicGridsInteract.DynamicGridsInteract","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.DynamicGridsInteract","text":"DynamicGridsInteract\n\n(Image: ) (Image: ) (Image: Build Status) (Image: Codecov)\n\nDynamicGridsInteract provides web interfaces for visualising and interacting with simulations from DynamicGrids.jl, and for packages that build on it like Dispersal.jl. \n\nThe basic InteractOutput works in the atom plot pane and Jupyter notebooks, and also serves as the core component of other outputs. A Mux.jl web server ServerOutput and a Blink.jl electron app ElectronOutput are also included.\n\nThis demo shows the InteractOutput running it the atom IDE:\n\n(Image: Demo)\n\nTo use:\n\nusing DynamicGrids, DynamicGridsInteract\n\noutput = InteractOutput(init; \n    ruleset=ruleset,\n    tspan=1:100, \n    processor=ColorProcessor()\n)\ndisplay(output)\n\nWhere init is the initial array(s) for the simulation and ruleset is the Ruleset to run in simulations. \n\nTo show the interface in the Atom plot pane, run display(output).\n\nInteractive parameters\n\nThe interface provides control of the simulation using ModelParameters.jl and Interact.jl via InteractModels.jl.  It will automatically generate sliders for every ModelParameters.Param parameter in the Ruleset, given they  additionally have either a range (an AbstractRange) or bounds (a Tuple) field defined.\n\nSee the examples in the InteractModels.jl docs.\n\n\n\n\n\n","category":"module"},{"location":"#DynamicGridsInteract.AbstractInteractOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.AbstractInteractOutput","text":"AbstractInteractOutput\n\nAbstract supertype of Interact outputs including InteractOuput and ElectronOutput\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.ElectronOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.ElectronOutput","text":"ElectronOutput <: AbstractInteractOutput\n\nElectronOutput(init; ruleset, tspan, kw...)\n\nA html output using Interact.jl and an Electron window through Blink.jl ElectronOutput automatically generates sliders to control simulations in realtime. args and kwargs are passed to InteractOutput.\n\nArguments\n\ninit: initialisation AbstractArray or NamedTuple of AbstractArray.\n\nKeywords\n\nruleset::Ruleset: the ruleset to run in the interface simulations.\n\nDynamicGrids.Extent keywords:\n\ninit: initialisation Array/NamedTuple for grid/s.\nmask: BitArray for defining cells that will/will not be run.\naux: NamedTuple of arbitrary input data. Use aux(data, Aux(:key)) to access from   a Rule in a type-stable way.\npadval: padding value for grids with neighborhood rules. The default is    zero(eltype(init)).\ntspan: Time span range. Never type-stable, only access this in modifyrule methods\n\nAn Extent object can be also passed to the extent keyword, and other keywords will be ignored.\n\nDynamicGrids.GraphicConfig keywords:\n\nfps::Real: Frames per second.\nstore::Bool: Whether to store frames like ArrayOutput or to disgard   them after visualising. Very long simulation runs may fill available    memory when store=true.\n\nA GraphicConfig object can be also passed to the graphicconfig keyword, and other keywords will be ignored.\n\nDynamicGrids.ImageConfig keywords:\n\nminval: Minimum value in the grid(s) to normalise for conversion to an RGB pixel.    A Vector/Matrix for multiple grids, matching the layout array.    Note: The default is 0, and will not be updated automatically for the simulation.\nmaxval: Maximum value in the grid(s) to normalise for conversion to an RGB pixel.    A Vector/Matrix for multiple grids, matching the layout array.    Note: The default is 1, and will not be updated automatically for the simulation.\nfont: String name of font to search for. A default will be guessed.\ntext: TextConfig() or nothing for no text. Default is TextConfig(; font=font).\nscheme: a ColorSchemes.jl colorscheme, ObjectScheme or object that defines   Base.get(obj, val) and returns a Color or a value that can be converted to Color   using ARGB32(val).\nzerocolor: a Col to use when values are zero, or nothing to ignore.\nmaskcolor: a Color to use when cells are masked, or nothing to ignore.\nrenderer: Renderer like Image or Layout. Will be detected    automatically, and use scheme, zerocolor and maskcolor keywords if available.   Can be a Vector/Matrix for multiple grids, matching the layout array. \n\n(See DynamicGrids.jl docs for more details)\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.InteractOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.InteractOutput","text":"InteractOutput <: AbstractInteractOutput\n\nInteractOutput(init; ruleset, kw...)\n\nAn Output for Atom/Juno and Jupyter notebooks, and the back-end for ElectronOutput and ServerOutput.\n\nArguments:\n\ninit: initialisation AbstractArray or NamedTuple of AbstractArray.\n\nKeywords\n\nruleset::Ruleset: the ruleset to run in the interface simulations.\n\nDynamicGrids.Extent keywords:\n\ninit: initialisation Array/NamedTuple for grid/s.\nmask: BitArray for defining cells that will/will not be run.\naux: NamedTuple of arbitrary input data. Use aux(data, Aux(:key)) to access from   a Rule in a type-stable way.\npadval: padding value for grids with neighborhood rules. The default is    zero(eltype(init)).\ntspan: Time span range. Never type-stable, only access this in modifyrule methods\n\nAn Extent object can be also passed to the extent keyword, and other keywords will be ignored.\n\nDynamicGrids.GraphicConfig keywords:\n\nfps::Real: Frames per second.\nstore::Bool: Whether to store frames like ArrayOutput or to disgard   them after visualising. Very long simulation runs may fill available    memory when store=true.\n\nA GraphicConfig object can be also passed to the graphicconfig keyword, and other keywords will be ignored.\n\nDynamicGrids.ImageConfig keywords:\n\nminval: Minimum value in the grid(s) to normalise for conversion to an RGB pixel.    A Vector/Matrix for multiple grids, matching the layout array.    Note: The default is 0, and will not be updated automatically for the simulation.\nmaxval: Maximum value in the grid(s) to normalise for conversion to an RGB pixel.    A Vector/Matrix for multiple grids, matching the layout array.    Note: The default is 1, and will not be updated automatically for the simulation.\nfont: String name of font to search for. A default will be guessed.\ntext: TextConfig() or nothing for no text. Default is TextConfig(; font=font).\nscheme: a ColorSchemes.jl colorscheme, ObjectScheme or object that defines   Base.get(obj, val) and returns a Color or a value that can be converted to Color   using ARGB32(val).\nzerocolor: a Col to use when values are zero, or nothing to ignore.\nmaskcolor: a Color to use when cells are masked, or nothing to ignore.\nrenderer: Renderer like Image or Layout. Will be detected    automatically, and use scheme, zerocolor and maskcolor keywords if available.   Can be a Vector/Matrix for multiple grids, matching the layout array. \n\n(See DynamicGrids.jl docs for more details)\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.ServerOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.ServerOutput","text":"ServerOutput(init; port=8080, rulset, tspan, kw...)\n\nA basic Mux.jl webserver, serving a InteractOutputs to the web.\n\nUnlike ElectronOutput, the parameter modifications are not  written back to the original rulset, and the simulations are not stored.  Each page load gets a newly initialised Rulset.\n\nArguments\n\ninit: initialisation Array or NamedTuple of Array\n\nKeyword arguments\n\nport: port number to reach the server. 8080 by default, found at localhost:8080.\nruleset::Ruleset: the ruleset to run in the interface simulations.\n\nDynamicGrids.Extent keywords:\n\ninit: initialisation Array/NamedTuple for grid/s.\nmask: BitArray for defining cells that will/will not be run.\naux: NamedTuple of arbitrary input data. Use aux(data, Aux(:key)) to access from   a Rule in a type-stable way.\npadval: padding value for grids with neighborhood rules. The default is    zero(eltype(init)).\ntspan: Time span range. Never type-stable, only access this in modifyrule methods\n\nAn Extent object can be also passed to the extent keyword, and other keywords will be ignored.\n\nDynamicGrids.GraphicConfig keywords:\n\nfps::Real: Frames per second.\nstore::Bool: Whether to store frames like ArrayOutput or to disgard   them after visualising. Very long simulation runs may fill available    memory when store=true.\n\nA GraphicConfig object can be also passed to the graphicconfig keyword, and other keywords will be ignored.\n\nDynamicGrids.ImageConfig keywords:\n\nminval: Minimum value in the grid(s) to normalise for conversion to an RGB pixel.    A Vector/Matrix for multiple grids, matching the layout array.    Note: The default is 0, and will not be updated automatically for the simulation.\nmaxval: Maximum value in the grid(s) to normalise for conversion to an RGB pixel.    A Vector/Matrix for multiple grids, matching the layout array.    Note: The default is 1, and will not be updated automatically for the simulation.\nfont: String name of font to search for. A default will be guessed.\ntext: TextConfig() or nothing for no text. Default is TextConfig(; font=font).\nscheme: a ColorSchemes.jl colorscheme, ObjectScheme or object that defines   Base.get(obj, val) and returns a Color or a value that can be converted to Color   using ARGB32(val).\nzerocolor: a Col to use when values are zero, or nothing to ignore.\nmaskcolor: a Color to use when cells are masked, or nothing to ignore.\nrenderer: Renderer like Image or Layout. Will be detected    automatically, and use scheme, zerocolor and maskcolor keywords if available.   Can be a Vector/Matrix for multiple grids, matching the layout array. \n\n(See DynamicGrids.jl docs for more details)\n\nAn ImageConfig object can be also passed to the imageconfig keyword, and other keywords will be ignored.\n\n\n\n\n\n","category":"type"}]
}
