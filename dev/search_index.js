var documenterSearchIndex = {"docs":
[{"location":"#DynamicGridsInteract.jl","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.jl","text":"","category":"section"},{"location":"","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.jl","text":"Modules = [DynamicGridsInteract]","category":"page"},{"location":"#DynamicGridsInteract.DynamicGridsInteract","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.DynamicGridsInteract","text":"DynamicGridsInteract\n\n(Image: ) (Image: ) (Image: Build Status) (Image: Codecov)\n\nDynamicGridsInteract provides web interfaces for visualising and interacting with simulations from DynamicGrids.jl, and for packages that build on it like Dispersal.jl. \n\nThe basic InteractOutput works in the atom plot pane and Jupyter notebooks, and also serves as the core component of other outputs. A Mux.jl web server ServerOutput and a Blink.jl electron app ElectronOutput are also included.\n\nThis demo shows the InteractOutput running it the atom IDE:\n\n(Image: Demo)\n\nTo use:\n\nusing DynamicGrids, DynamicGridsInteract\n\noutput = InteractOutput(init; \n    ruleset=ruleset,\n    tspan=1:100, \n    processor=ColorProcessor()\n)\ndisplay(output)\n\nWhere init is the initial array(s) for the simulation and ruleset is the Ruleset to run in simulations. \n\nTo show the interface in the Atom plot pane, run display(output).\n\nInteract\n\nThe interface provides control of the simulation using Interact.jl. It will automatically generate sliders for the parameters of the Ruleset, even for user-defined rules. \n\nTo define range limits for sliders, use the @bounds macro from FieldMetadata.jl on your struct. Fields to be ignored can be marked with false using the @flatten macro, and descriptions for hover text use @description.\n\n\n\n\n\n","category":"module"},{"location":"#DynamicGridsInteract.AbstractInteractOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.AbstractInteractOutput","text":"Abstract supertype of Interact outputs including InteractOuput and ElectronOutput\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.ElectronOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.ElectronOutput","text":"ElectronOutput(init, ruleset::Ruleset; kwargs...)\n\nA html output using Interact.jl and an Electron window through Blink.jl ElectronOutput automatically generates sliders to control simulations in realtime. args and kwargs are passed to InteractOutput.\n\nExample\n\nusing Blink\nElectronOutput(init, ruleset; tspan=(1, 100))\n\nArguments\n\ninit: initialisation array, or NamedTuple of arrays\nruleset::Ruleset: A DynamicGrids Ruleset \n\nKeyword arguments are passed to InteractOutput.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.InteractOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.InteractOutput","text":"InteractOutput(init; ruleset, fps=25.0, store=false,\n               processor=ColorProcessor(), minval=nothing, maxval=nothing,\n               extrainit=Dict())\n\nAn Output for Atom/Juno and Jupyter notebooks, and the back-end for ElectronOutput and ServerOutput.\n\nArguments:\n\ninit: initialisation Array or NamedTuple of arrays.\n\nKeyword Arguments:\n\nruleset: the ruleset to run in the interface simulations.\ntspan: AbstractRange timespan for the simulation\nfps::Real: frames per second to display the simulation\nstore::Bool: whether ot store the simulation frames for later use\n`processor::GridProcessor\nminval::Number: minimum value to display in the simulation\nmaxval::Number: maximum value to display in the simulation\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.ServerOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.ServerOutput","text":"ServerOutput(frames, rulset, args...; port=8080, kwargs...)\n\nA basic Mux.jl webserver, serving a InteractOutputs to the web.\n\nUnlike ElectronOutput, the parameter modifications are not written back to the original rulset, and the simulations are not stored.  Each page load gets a identical initialised rulset.\n\nArguments\n\ninit: AbstractArray or NamedTuple of Array\nruleset::Models: tuple of rulset wrapped in Models().\n\nKeyword arguments\n\nport: port number to reach the server. ie localhost:8080\nkwargs: keyword arguments to be passed to InteractOuput.\n\n\n\n\n\n","category":"type"}]
}
