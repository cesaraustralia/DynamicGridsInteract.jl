var documenterSearchIndex = {"docs":
[{"location":"#DynamicGridsInteract.jl","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.jl","text":"","category":"section"},{"location":"","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.jl","text":"Modules = [DynamicGridsInteract]","category":"page"},{"location":"#DynamicGridsInteract.DynamicGridsInteract","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.DynamicGridsInteract","text":"DynamicGridsInteract\n\n(Image: ) (Image: ) (Image: Build Status) (Image: Codecov)\n\nDynamicGridsInteract provides web interfaces for visualising and interacting with simulations from DynamicGrids.jl, and for packages that build on it like Dispersal.jl. \n\nThe basic InteractOutput works in the atom plot pane and Jupyter notebooks, and also serves as the core component of other outputs. A Mux.jl web server ServerOutput and a Blink.jl electron app ElectronOutput are also included.\n\nThis demo shows the InteractOutput running it the atom IDE:\n\n(Image: Demo)\n\nTo use:\n\nusing DynamicGrids, DynamicGridsInteract\n\noutput = InteractOutput(init; \n    ruleset=ruleset,\n    tspan=1:100, \n    processor=ColorProcessor()\n)\ndisplay(output)\n\nWhere init is the initial array(s) for the simulation and ruleset is the Ruleset to run in simulations. \n\nTo show the interface in the Atom plot pane, run display(output).\n\nInteractive parameters\n\nThe interface provides control of the simulation using ModelParameters.jl and Interact.jl via InteractModels.jl.  It will automatically generate sliders for every ModelParameters.Param parameter in the Ruleset, given they  additionally have either a range (an AbstractRange) or bounds (a Tuple) field defined.\n\nSee the examples in the InteractModels.jl docs.\n\n\n\n\n\n","category":"module"},{"location":"#DynamicGridsInteract.AbstractInteractOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.AbstractInteractOutput","text":"AbstractInteractOutput\n\nAbstract supertype of Interact outputs including InteractOuput and ElectronOutput\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.ElectronOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.ElectronOutput","text":"ElectronOutput <: AbstractInteractOutput\n\nElectronOutput(init; ruleset, tspan, kw...)\n\nA html output using Interact.jl and an Electron window through Blink.jl ElectronOutput automatically generates sliders to control simulations in realtime. args and kwargs are passed to InteractOutput.\n\nKeyword arguments are passed to InteractOutput.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.InteractOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.InteractOutput","text":"InteractOutput <: AbstractInteractOutput\n\nInteractOutput(init; ruleset, kw...)\n\nAn Output for Atom/Juno and Jupyter notebooks, and the back-end for ElectronOutput and ServerOutput.\n\nArguments:\n\ninit: initialisation Array or NamedTuple of arrays.\n\nKeywords\n\nruleset::Ruleset: the ruleset to run in the interface simulations.\ntspan: AbstractRange timespan for the simulation\naux: NamedTuple of arbitrary input data. Use get(data, Aux(:key), I...)    to access from a Rule in a type-stable way.\nmask: BitArray for defining cells that will/will not be run.\npadval: padding value for grids with neighborhood rules. The default is zero(eltype(init)).\nfont: String font name, used in default TextConfig. A default will be guessed.\ntext: TextConfig object or nothing for no text.\nscheme: ColorSchemes.jl scheme, or Greyscale()\nrenderer: Renderer such as Image or Layout\nminval: minimum value(s) to set colour maximum\nmaxval: maximum values(s) to set colour minimum\n\n(See DynamicGrids.jl docs for more details)\n\n\n\n\n\n","category":"type"},{"location":"#DynamicGridsInteract.ServerOutput","page":"DynamicGridsInteract.jl","title":"DynamicGridsInteract.ServerOutput","text":"ServerOutput(init; port=8080, rulset, tspan, kw...)\n\nA basic Mux.jl webserver, serving a InteractOutputs to the web.\n\nUnlike ElectronOutput, the parameter modifications are not  written back to the original rulset, and the simulations are not stored.  Each page load gets a newly initialised Rulset.\n\nArguments\n\ninit: initialisation Array or NamedTuple of Array\n\nKeyword arguments\n\nport: port number to reach the server. ie localhost:8080\nruleset::Ruleset: the ruleset to run in the interface simulations.\ntspan: AbstractRange timespan for the simulation\nkw: other keyword arguments to be passed to InteractOuput.\n\n\n\n\n\n","category":"type"}]
}
